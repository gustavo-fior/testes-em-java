package br.com.alura.leilao.login;

import static org.junit.Assert.assertFalse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class LoginTest {
	
	private LoginPage paginaDeLogin;
	
	@BeforeEach
	void beforeEach() {
		this.paginaDeLogin = new LoginPage();
	}
	
	@AfterEach
	void afterEach() {
		this.paginaDeLogin.fechar();
	}

	@Test
	void deveriaLogarUmUsuarioCorretamente() {

		this.paginaDeLogin.submitLoginForm("fulano", "pass");

		assertFalse(browser.getCurrentUrl().equals("http://localhost:8080/login"));

		// Recuperando texto desse elemento
		assertEquals("fulano", browser.findElement(By.id("logged-username")).getText());
	}

	@Test
	void naoDeveriaLogarUmUsuarioInvalido() {

		this.paginaDeLogin.submitLoginForm("invalido", "invalida");

		assertTrue(browser.getCurrentUrl().equals("http://localhost:8080/login?error"));

		// Recuperando texto desse elemento
		assertThrows(NoSuchElementException.class, () -> browser.findElement(By.id("logged-username")));

		// Pegando o codigo fonte da pagina
		assertTrue(browser.getPageSource().contains("Usuário e senha inválidos."));
	}
	
	@Test
	void naoDeveriaAcessarPaginaRestritaSemEstarLogado() {
		
		browser.navigate().to("http://localhost:8080/leiloes/2");
		
		assertTrue(browser.getCurrentUrl().equals("http://localhost:8080/login"));
		assertFalse(browser.getPageSource().contains("Dados do Leilão"));
	}
}
